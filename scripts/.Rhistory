ggsave(ruta_completa, width = ancho, height = alto, dpi = 300)
} else {
ggsave(ruta_completa, plot = plot_obj, width = ancho, height = alto, dpi = 300)
}
cat("Gráfico guardado en:", ruta_completa, "\n")
}
p1 <- crear_grafico_op("op_setting1") + labs(x = "Op.Setting 1")
guardar_grafico(p1, "04_opsetting1_vs_rul.png", ancho = 10, alto = 6)
p2 <- crear_grafico_op("op_setting2") + labs(x = "Op.Setting 2")
guardar_grafico(p2, "05_opsetting2_vs_rul.png", ancho = 10, alto = 6)
p3 <- crear_grafico_op("op_setting3") + labs(x = "Op.Setting 3")
guardar_grafico(p3, "06_opsetting3_vs_rul.png", ancho = 10, alto = 6)
# ==============================================================================
# ANÁLISIS 5: VIDA ÚTIL DE MOTORES POR DATASET
# ==============================================================================
life_query <- "
SELECT
d.name AS dataset,
MAX(c.time_in_cycles) AS vida_util
FROM cycles c
JOIN motors m ON c.motor_id = m.id
JOIN datasets d ON m.dataset_id = d.id
WHERE m.type = 'train'
GROUP BY d.name, m.id
"
life_data <- dbGetQuery(conn, life_query)
# Gráfico de vida útil
ggplot(life_data, aes(x = vida_util, fill = dataset)) +
geom_histogram(aes(y = after_stat(density)), bins = 25, alpha = 0.8) +
geom_density(alpha = 0.3, color = "#2c3e50", linewidth = 0.8) +
facet_wrap(~dataset, scales = "free", ncol = 2) +
labs(title = "Distribución de Vida Útil por Dataset",
subtitle = "Ciclos de vida completos de motores en entrenamiento",
x = "Ciclos de Vida",
y = "Densidad",
caption = "Fuente: Vulcan Forge Analytics") +
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5, color = "#2c3e50"),
plot.subtitle = element_text(size = 12, hjust = 0.5, color = "#7f8c8d"),
axis.title = element_text(size = 12, color = "#2c3e50"),
strip.text = element_text(size = 11, face = "bold", color = "white"),
strip.background = element_rect(fill = "#1abc9c"),
legend.position = "none",
panel.spacing = unit(1.2, "lines")
) +
scale_fill_manual(values = vulcan_palette) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 8)) +
scale_y_continuous(labels = scales::comma)
# Función para guardar gráficos (VERSIÓN CORREGIDA)
guardar_grafico <- function(nombre_archivo, ancho = 10, alto = 8) {
ruta_completa <- file.path("graficos_eda", nombre_archivo)
ggsave(ruta_completa, width = ancho, height = alto, dpi = 300)
cat("Gráfico guardado en:", ruta_completa, "\n")
}
guardar_grafico("07_vida_util_motores.png", 10, 8)
# ==============================================================================
# ANÁLISIS 6: SENSORES EN PUNTO DE FALLO
# ==============================================================================
failure_query <- "
SELECT
d.name AS dataset,
s.sensor_4,
s.sensor_11,
s.sensor_15
FROM sensor_measurements s
JOIN cycles c ON s.cycle_id = c.id
JOIN (
SELECT
motor_id,
MAX(time_in_cycles) AS ultimo_ciclo
FROM cycles
GROUP BY motor_id
) uc ON c.motor_id = uc.motor_id AND c.time_in_cycles = uc.ultimo_ciclo
JOIN motors m ON c.motor_id = m.id
JOIN datasets d ON m.dataset_id = d.id
WHERE m.type = 'train'
"
failure_data <- dbGetQuery(conn, failure_query)
# Gráfico de cajas
failure_long <- failure_data %>%
pivot_longer(
cols = c(sensor_4, sensor_11, sensor_15),
names_to = "sensor",
values_to = "valor"
) %>%
mutate(
sensor = factor(sensor,
levels = c("sensor_4", "sensor_11", "sensor_15"),
labels = c("Sensor 4", "Sensor 11", "Sensor 15")
)
)
ggplot(failure_long, aes(x = sensor, y = valor, fill = dataset)) +
geom_boxplot(alpha = 0.85, outlier.color = "#c0392b", outlier.alpha = 0.7) +
facet_wrap(~dataset, nrow = 2) +
labs(title = "Valores de Sensores en el Último Ciclo Operativo",
subtitle = "Comportamiento en punto de fallo (último ciclo registrado)",
x = "Sensor",
y = "Valor",
caption = "Fuente: Vulcan Forge Analytics") +
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5, color = "#2c3e50"),
plot.subtitle = element_text(size = 12, hjust = 0.5, color = "#7f8c8d", margin = margin(b = 15)),
axis.title = element_text(size = 12, color = "#2c3e50"),
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.position = "none",
strip.text = element_text(face = "bold", size = 11, color = "white"),
strip.background = element_rect(fill = "#3498db"),
panel.grid.major.x = element_blank()
) +
scale_fill_manual(values = vulcan_palette) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 6))
guardar_grafico("08_sensores_falla.png", 12, 8)
# ==============================================================================
# CERRAR CONEXIÓN
# ==============================================================================
dbDisconnect(conn)
message("Conexión cerrada")
# ==============================================================================
# CONFIGURACIÓN INICIAL
# ==============================================================================
# Directorios para salidas
if (!dir.exists("graficos_eda")) dir.create("graficos_eda")
if (!dir.exists("tablas")) dir.create("tablas")
# Cargar paquetes
library(DBI)
library(RPostgres)
library(dplyr)
library(ggplot2)
library(tidyr)
library(corrplot)
library(scales)
library(kableExtra)
# Paleta de colores Vulcan Forge
vulcan_palette <- c("#c0392b", "#e67e22", "#3498db", "#2c3e50", "#1abc9c")
# Función para guardar gráficos (VERSIÓN MEJORADA)
guardar_grafico <- function(plot_obj = NULL, nombre_archivo, ancho = 10, alto = 8) {
ruta_completa <- file.path("graficos_eda", nombre_archivo)
if (is.null(plot_obj)) {
# Guardar el último gráfico generado
ggsave(ruta_completa, width = ancho, height = alto, dpi = 300)
} else {
# Guardar un gráfico específico
ggsave(ruta_completa, plot = plot_obj, width = ancho, height = alto, dpi = 300)
}
cat("Gráfico guardado en:", ruta_completa, "\n")
}
# ==============================================================================
# CONEXIÓN A BASE DE DATOS
# ==============================================================================
source("hidden1.R")
cred <- secrets()
tryCatch({
conn <- dbConnect(
Postgres(),
dbname = cred$dbname,
host = cred$host,
port = cred$port,
user = cred$user,
password = cred$password
)
message("✅ Conexión exitosa a la base de datos")
}, error = function(e) {
message("❌ Error en conexión: ", e$message)
quit(status = 1)
})
# ==============================================================================
# ANÁLISIS 1: DISTRIBUCIÓN DE RUL POR DATASET
# ==============================================================================
rul_query <- "
SELECT
d.name AS dataset,
r.rul_value
FROM rul r
JOIN motors m ON r.motor_id = m.id
JOIN datasets d ON m.dataset_id = d.id
WHERE m.type = 'test'
"
rul_data <- dbGetQuery(conn, rul_query)
# Gráfico de distribución
p1_rul <- ggplot(rul_data, aes(x = rul_value, fill = dataset)) +
geom_density(alpha = 0.7) +
geom_rug(aes(color = dataset), alpha = 0.5) +
facet_wrap(~dataset, ncol = 2, scales = "free_y") +
labs(title = "Distribución de RUL por Dataset",
subtitle = "Densidad de Remaining Useful Life en motores de prueba",
x = "Remaining Useful Life (ciclos)",
y = "Densidad",
caption = "Fuente: Vulcan Forge Analytics") +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5, color = "#2c3e50"),
plot.subtitle = element_text(size = 12, hjust = 0.5, color = "#7f8c8d", margin = margin(b = 15)),
axis.title = element_text(size = 12, color = "#2c3e50"),
axis.text = element_text(size = 10),
strip.text = element_text(size = 12, face = "bold", color = "white"),
strip.background = element_rect(fill = "#e67e22"),
legend.position = "none",
panel.spacing = unit(1, "lines"),
plot.margin = margin(15, 15, 15, 15),
plot.caption = element_text(size = 10, color = "#7f8c8d", margin = margin(t = 10))
) +
scale_fill_manual(values = vulcan_palette) +
scale_color_manual(values = vulcan_palette) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 8))
guardar_grafico(p1_rul, "01_distribucion_rul.png", 10, 8)
# Estadísticas resumen
rul_summary <- rul_data %>%
group_by(dataset) %>%
summarise(
Mínimo = min(rul_value),
Q1 = quantile(rul_value, 0.25),
Mediana = median(rul_value),
Media = mean(rul_value),
Q3 = quantile(rul_value, 0.75),
Máximo = max(rul_value),
Desv_Estándar = sd(rul_value),
CV = sd(rul_value)/mean(rul_value)
) %>%
mutate(across(where(is.numeric), round, 2))
# Generar tabla HTML
rul_table_html <- rul_summary %>%
kable(format = "html", escape = FALSE, align = "c") %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) %>%
row_spec(0, bold = TRUE, color = "white", background = "#c0392b") %>%
row_spec(1:nrow(rul_summary), background = "#f9f9f9") %>%
column_spec(1, bold = TRUE, background = "#f0f0f0") %>%
add_header_above(
c(" " = 1, "Estadísticas de RUL (ciclos)" = 8),
background = "#2c3e50",
color = "white"
) %>%
footnote(
general = "Análisis de Vida Residual Útil (RUL) - Vulcan Forge Analytics",
general_title = "Fuente:",
footnote_as_chunk = TRUE
)
# Guardar tabla HTML
writeLines(rul_table_html, "tablas/01_estadisticas_rul.html")
# ==============================================================================
# ANÁLISIS 2: EVOLUCIÓN DE SENSORES EN MOTORES
# ==============================================================================
sensor_query <- "
SELECT
d.name AS dataset,
m.original_id AS motor_id,
c.time_in_cycles,
s.sensor_4,
s.sensor_11,
s.sensor_15
FROM sensor_measurements s
JOIN cycles c ON s.cycle_id = c.id
JOIN motors m ON c.motor_id = m.id
JOIN datasets d ON m.dataset_id = d.id
WHERE m.type = 'train'
AND m.original_id IN (1, 5, 10, 15, 20)
AND d.name = 'FD001'
ORDER BY m.original_id, c.time_in_cycles
"
sensor_data <- dbGetQuery(conn, sensor_query)
# Convertir a formato largo
sensor_long <- sensor_data %>%
pivot_longer(
cols = c(sensor_4, sensor_11, sensor_15),
names_to = "sensor",
values_to = "valor"
) %>%
mutate(
sensor = factor(sensor,
levels = c("sensor_4", "sensor_11", "sensor_15"),
labels = c("Sensor 4 (Temperatura)", "Sensor 11 (Presión)", "Sensor 15 (Vibración)")
)
)
# Gráfico de evolución
p2_sensores <- ggplot(sensor_long, aes(x = time_in_cycles, y = valor, color = sensor)) +
geom_line(linewidth = 0.8, alpha = 0.9) +
geom_point(size = 1.2, alpha = 0.7) +
facet_grid(sensor ~ motor_id, scales = "free_y") +
labs(
title = "Evolución de Sensores Clave por Motor (FD001)",
subtitle = "Comportamiento de sensores críticos durante ciclos operativos",
x = "Ciclos Operativos",
y = "Valor del Sensor",
color = "Sensores",
caption = "Fuente: Vulcan Forge Analytics"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5, color = "#2c3e50"),
plot.subtitle = element_text(size = 12, hjust = 0.5, color = "#7f8c8d", margin = margin(b = 15)),
axis.title = element_text(size = 12, color = "#2c3e50"),
axis.text = element_text(size = 9, color = "#34495e"),
legend.position = "top",
legend.title = element_text(face = "bold", color = "#e67e22"),
legend.text = element_text(color = "#2c3e50"),
strip.text.x = element_text(face = "bold", size = 11, color = "white", margin = margin(b = 5)),
strip.text.y = element_text(face = "bold", size = 10, color = "#2c3e50"),
strip.background.x = element_rect(fill = "#e67e22"),
strip.background.y = element_rect(fill = "#ecf0f1"),
panel.grid.major = element_line(color = "#ecf0f1", linewidth = 0.3),
panel.grid.minor = element_blank(),
panel.spacing = unit(1, "lines"),
plot.caption = element_text(size = 10, color = "#7f8c8d", margin = margin(t = 10))
) +
scale_color_manual(values = vulcan_palette[c(1, 3, 5)]) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 6)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 5))
guardar_grafico(p2_sensores, "02_evolucion_sensores.png", 14, 10)
# ==============================================================================
# ANÁLISIS 3: CORRELACIÓN ENTRE SENSORES
# ==============================================================================
corr_query <- "
SELECT
s.sensor_4,
s.sensor_11,
s.sensor_15,
s.sensor_7,
s.sensor_12
FROM sensor_measurements s
JOIN cycles c ON s.cycle_id = c.id
JOIN motors m ON c.motor_id = m.id
JOIN datasets d ON m.dataset_id = d.id
WHERE d.name = 'FD001'
AND m.type = 'train'
LIMIT 1000
"
corr_data <- dbGetQuery(conn, corr_query)
# Matriz de correlación
cor_matrix <- cor(corr_data)
colnames(cor_matrix) <- c("Sensor 4", "Sensor 11", "Sensor 15", "Sensor 7", "Sensor 12")
rownames(cor_matrix) <- colnames(cor_matrix)
# Gráfico de correlación con colores Vulcan
png(file.path("graficos_eda", "03_correlacion_sensores.png"),
width = 10, height = 8, units = "in", res = 300)
corrplot(
cor_matrix,
method = "color",
type = "upper",
col = colorRampPalette(c(vulcan_palette[5], "white", vulcan_palette[1]))(200),
tl.col = "#2c3e50",
tl.srt = 45,
addCoef.col = "#2c3e50",
number.cex = 0.8,
title = "Correlación entre Sensores Clave (FD001)",
mar = c(0, 0, 2, 0)
)
dev.off()
# ==============================================================================
# ANÁLISIS 4: CONFIGURACIONES OPERATIVAS vs RUL
# ==============================================================================
op_query <- "
SELECT
d.name AS dataset,
c.op_setting1,
c.op_setting2,
c.op_setting3,
r.rul_value
FROM rul r
JOIN (
SELECT
motor_id,
MAX(time_in_cycles) AS ultimo_ciclo
FROM cycles
GROUP BY motor_id
) uc ON r.motor_id = uc.motor_id
JOIN cycles c ON r.motor_id = c.motor_id
AND c.time_in_cycles = uc.ultimo_ciclo
JOIN motors m ON r.motor_id = m.id
JOIN datasets d ON m.dataset_id = d.id
WHERE m.type = 'test'
"
op_data <- dbGetQuery(conn, op_query)
# Función para crear gráficos de operaciones
crear_grafico_op <- function(op_var) {
ggplot(op_data, aes_string(x = op_var, y = "rul_value", color = "dataset")) +
geom_point(alpha = 0.7, size = 2.5) +
geom_smooth(method = "lm", se = FALSE, linewidth = 1.2) +
facet_wrap(~dataset, scales = "free_x") +
labs(
title = paste("Relación entre", gsub("_", " ", op_var), "y RUL"),
subtitle = "Configuraciones operativas en el último ciclo vs vida residual",
x = gsub("_", " ", op_var),
y = "RUL",
caption = "Fuente: Vulcan Forge Analytics"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5, color = "#2c3e50"),
plot.subtitle = element_text(size = 11, hjust = 0.5, color = "#7f8c8d"),
axis.title = element_text(size = 12, color = "#2c3e50"),
legend.position = "none",
strip.text = element_text(face = "bold", size = 11, color = "white"),
strip.background = element_rect(fill = "#3498db"),
panel.grid.major = element_line(color = "#ecf0f1", linewidth = 0.3),
plot.caption = element_text(size = 9, color = "#7f8c8d")
) +
scale_color_manual(values = vulcan_palette) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 6))
}
# Generar y guardar gráficos
p4_op1 <- crear_grafico_op("op_setting1") + labs(x = "Op.Setting 1")
guardar_grafico(p4_op1, "04_opsetting1_vs_rul.png", 10, 6)
p4_op2 <- crear_grafico_op("op_setting2") + labs(x = "Op.Setting 2")
guardar_grafico(p4_op2, "05_opsetting2_vs_rul.png", 10, 6)
p4_op3 <- crear_grafico_op("op_setting3") + labs(x = "Op.Setting 3")
guardar_grafico(p4_op3, "06_opsetting3_vs_rul.png", 10, 6)
# ==============================================================================
# ANÁLISIS 5: VIDA ÚTIL DE MOTORES POR DATASET
# ==============================================================================
life_query <- "
SELECT
d.name AS dataset,
MAX(c.time_in_cycles) AS vida_util
FROM cycles c
JOIN motors m ON c.motor_id = m.id
JOIN datasets d ON m.dataset_id = d.id
WHERE m.type = 'train'
GROUP BY d.name, m.id
"
life_data <- dbGetQuery(conn, life_query)
# Gráfico de vida útil
p5_vida <- ggplot(life_data, aes(x = vida_util, fill = dataset)) +
geom_histogram(aes(y = after_stat(density)), bins = 25, alpha = 0.8) +
geom_density(alpha = 0.3, color = "#2c3e50", linewidth = 0.8) +
facet_wrap(~dataset, scales = "free", ncol = 2) +
labs(title = "Distribución de Vida Útil por Dataset",
subtitle = "Ciclos de vida completos de motores en entrenamiento",
x = "Ciclos de Vida",
y = "Densidad",
caption = "Fuente: Vulcan Forge Analytics") +
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5, color = "#2c3e50"),
plot.subtitle = element_text(size = 12, hjust = 0.5, color = "#7f8c8d"),
axis.title = element_text(size = 12, color = "#2c3e50"),
strip.text = element_text(size = 11, face = "bold", color = "white"),
strip.background = element_rect(fill = "#1abc9c"),
legend.position = "none",
panel.spacing = unit(1.2, "lines")
) +
scale_fill_manual(values = vulcan_palette) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 8)) +
scale_y_continuous(labels = scales::comma)
guardar_grafico(p5_vida, "07_vida_util_motores.png", 10, 8)
# ==============================================================================
# ANÁLISIS 6: SENSORES EN PUNTO DE FALLO
# ==============================================================================
failure_query <- "
SELECT
d.name AS dataset,
s.sensor_4,
s.sensor_11,
s.sensor_15
FROM sensor_measurements s
JOIN cycles c ON s.cycle_id = c.id
JOIN (
SELECT
motor_id,
MAX(time_in_cycles) AS ultimo_ciclo
FROM cycles
GROUP BY motor_id
) uc ON c.motor_id = uc.motor_id AND c.time_in_cycles = uc.ultimo_ciclo
JOIN motors m ON c.motor_id = m.id
JOIN datasets d ON m.dataset_id = d.id
WHERE m.type = 'train'
"
failure_data <- dbGetQuery(conn, failure_query)
# Gráfico de cajas
failure_long <- failure_data %>%
pivot_longer(
cols = c(sensor_4, sensor_11, sensor_15),
names_to = "sensor",
values_to = "valor"
) %>%
mutate(
sensor = factor(sensor,
levels = c("sensor_4", "sensor_11", "sensor_15"),
labels = c("Sensor 4", "Sensor 11", "Sensor 15")
)
)
p6_falla <- ggplot(failure_long, aes(x = sensor, y = valor, fill = dataset)) +
geom_boxplot(alpha = 0.85, outlier.color = "#c0392b", outlier.alpha = 0.7) +
facet_wrap(~dataset, nrow = 2) +
labs(title = "Valores de Sensores en el Último Ciclo Operativo",
subtitle = "Comportamiento en punto de fallo (último ciclo registrado)",
x = "Sensor",
y = "Valor",
caption = "Fuente: Vulcan Forge Analytics") +
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5, color = "#2c3e50"),
plot.subtitle = element_text(size = 12, hjust = 0.5, color = "#7f8c8d", margin = margin(b = 15)),
axis.title = element_text(size = 12, color = "#2c3e50"),
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.position = "none",
strip.text = element_text(face = "bold", size = 11, color = "white"),
strip.background = element_rect(fill = "#3498db"),
panel.grid.major.x = element_blank()
) +
scale_fill_manual(values = vulcan_palette) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 6))
guardar_grafico(p6_falla, "08_sensores_falla.png", 12, 8)
# ==============================================================================
# CERRAR CONEXIÓN
# ==============================================================================
dbDisconnect(conn)
message("Conexión cerrada")
